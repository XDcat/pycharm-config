<templateSet group="环评">
  <template name="hp1" value="&#10;'''&#10;流程：&#10;1. parse_task: 获取task，并将数据传给get_data&#10;2. get_data: 解析页面数据，把数据存入data字典，然后传入i_api.save_huanping(data, province_id, city_id, type_id)保存数据&#10;'''&#10;from urllib.parse import urljoin&#10;from iWork.dbapi.api import get_tasks_with_cat&#10;from iWork import i_api&#10;from pprint import pprint&#10;import re&#10;&#10;# 计数&#10;count = 0&#10;# 城市信息&#10;city_id = $city_id$&#10;province_id = $provinec_id$&#10;&#10;def parse_task_$type_id$():&#10;    # 获取本市未爬取的url&#10;    tasks = get_tasks_with_cat(province_id, city_id, $type_id$)&#10;    for task in tasks:&#10;        # 实时播报&#10;        global count&#10;        count += 1&#10;&#9;&#9;# 时间&#10;        p_time = task[4]&#10;        p_time = p_time.isoformat()[:10]&#10;        print(count, p_time, task[0], task[1], task[2])&#10;        # 处理数据&#10;        title = task[2]&#10;        url = task[1]&#10;        task_id = task[0]&#10;        get_data_1(url, title, p_time, task_id)&#10;    print(&quot;======city_id:{}, type_id{}======&quot;.format(city_id, $type_id$))&#10;    print(&quot;======完成======&quot;)&#10;    &#10;@i_api.exception_log(('city_id: ' + str(city_id) + 'type_id:' + str($type_id$)))&#10;def get_data_1(url, title, publicity_time, task_id):&#10;    html = i_api.html_xpath(url)&#10;    # TODO: 网页快照&#10;    snapshot = i_api.etree_to_string(html.xpath()[0])&#10;    # TODO: 风险等级&#10;    riskrank = i_api.get_risk_rank()&#10;    # 数据字典&#10;    data = i_api.get_form()&#10;    data['publicity_time'] = publicity_time&#10;    data['snapshot'] = snapshot&#10;    data['risk_rank'] = riskrank&#10;    data['remark'] = url&#10;    &#10;    &#10;    &#10;    i_api.print_dict(data)&#10;    # i_api.save_huanping(data, province_id, city_id, $type_id$, task_id)&#10;&#10;if __name__ == '__main__':&#10;    parse_task_1()&#10;&#10;" description="获取环评1" toReformat="false" toShortenFQNames="true">
    <variable name="city_id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="provinec_id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type_id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="hp23" value="def parse_task_$type_id$():&#10;    # 获取本市未爬取的url&#10;    tasks = get_tasks_with_cat(province_id, city_id, $type_id$)&#10;    for task in tasks:&#10;        # 实时播报&#10;        global count&#10;        count += 1&#10;        # 时间&#10;        p_time = task[4]&#10;        p_time = p_time.isoformat()[:10]&#10;        print(count, p_time, task[0], task[1], task[2])&#10;        # 处理数据&#10;        title = task[2]&#10;        url = task[1]&#10;        task_id = task[0]&#10;        get_data_$type_id$(url, title, p_time, task_id)&#10;    print(&quot;======city_id:{}, type_id{}======&quot;.format(city_id, $type_id$))&#10;    print(&quot;======完成======&quot;)&#10;&#10;@i_api.exception_log(('city_id: ' + str(city_id) + 'type_id:' + str($type_id$)))&#10;def get_data_$type_id$(url, title, publicity_time, task_id):&#10;    html = i_api.html_xpath(url)&#10;    # TODO: 网页快照&#10;    snapshot = i_api.etree_to_string(html.xpath()[0])&#10;    # TODO: 风险等级&#10;    riskrank = i_api.get_risk_rank()&#10;    # 数据字典&#10;    data = i_api.get_form()&#10;    data['snapshot'] = snapshot&#10;    data['publicity_time'] = publicity_time&#10;    data['risk_rank'] = riskrank&#10;    data['remark'] = url&#10;&#10;&#10;&#10;    i_api.print_dict(data)&#10;    # i_api.save_huanping(data, province_id, city_id, $type_id$, task_id)&#10;&#10;if __name__ == '__main__':&#10;    parse_task_$type_id$()&#10;" description="获取环评2or3" toReformat="false" toShortenFQNames="true">
    <variable name="type_id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="task" value="# 解析网页&#10;from lxml import etree&#10;# api&#10;from iWork.dbapi.api import create_task, judge_task, get_latest_time  # 数据库api&#10;from iWork import i_api  # 装饰器&#10;import time&#10;import re&#10;from urllib.parse import urljoin&#10;&#10;# 计数&#10;global count&#10;count = 0&#10;# 城市数据&#10;# TODO: 城市数据以及url&#10;province_id = $province_id$  # 省份&#10;city_id = $city_id$  # 市&#10;enconding = 'utf-8'  # 网页编码&#10;# 更新的时间判断&#10;latest_time = get_latest_time(province_id, city_id)&#10;if latest_time:&#10;    latest_time = time.mktime(latest_time.timetuple())  # 获取最大时间&#10;else:&#10;    latest_time = 0&#10;&#10;&#10;# @i_api.exception_log('每个类别')&#10;def parse_kind(kind):&#10;    '''&#10;    收集数据统一入口&#10;    - 获取类型&#10;    - 获取页数&#10;    - 循环页数获取数据&#10;    '''&#10;    # 获取page类型&#10;    page_type = kind[1]&#10;    # 获取数据&#10;    url_page = kind[0]&#10;    page = int(get_page(url_page))&#10;    for i in range(1, page + 1):&#10;        # TODO: 设置url&#10;        url = url_page.format(i)  # 生产确定的url, 第一页特殊处理&#10;        print(url)&#10;        html = i_api.html_xpath(url, enconding)  # 可以被xpath解析的对象&#10;        # TODO: 解析xpath&#10;        href = html.xpath()  # url列表&#10;        href = [urljoin(url, i) for i in href]&#10;        title = html.xpath()  # 标题列表&#10;        time_c = html.xpath()  # 发布日期&#10;        if (len(href) == len(title)) and (len(href) == len(time_c)):&#10;            for j in range(len(href)):&#10;                global count&#10;                count += 1&#10;                print(count, page_type, time_c[j], href[j], end='\t')&#10;                # 创建任务的时候判断一下是否存在&#10;                if judge_task(href[j], province_id, city_id) and i_api.time_bigger(latest_time, time.mktime(&#10;                        time.strptime(time_c[j], '%Y-%m-%d'))):&#10;                    # TODO: 入库&#10;                    print(&quot;获取成功&quot;, title[j])&#10;                    # create_task(href[j], title[j].strip(), province_id, city_id, time_c[j], category_id=page_type)&#10;                else:&#10;                    if not i_api.time_bigger(latest_time, time.mktime(time.strptime(time_c[j], '%Y-%m-%d'))):&#10;                        print('不符合更新要求，停止！')&#10;                    else:&#10;                        print('已经存在，停止！')&#10;                    return&#10;&#10;        else:&#10;            print(&quot;title:{}, url:{}, time:{}, {}&quot;.format(len(title), len(href), len(time_c), url))&#10;            raise RuntimeError('标题，url，时间数目不匹配')&#10;&#10;&#10;def get_page(url):&#10;    '''&#10;    获取界面页数&#10;    :param url: 三大类url&#10;    :return: int&#10;    '''&#10;    #  TODO: 获取页码&#10;    # 初始化url,获取response&#10;    url = url.format(1)&#10;    res = i_api.request_text(url)&#10;    res = re.search('', res).group(1)&#10;    print(res)&#10;    # return res&#10;&#10;def run():&#10;    # 记录运行时间&#10;    start = time.time()&#10;&#10;    kinds = [&#10;        # 三类网址的第一个界面的url&#10;        # ['', None],  # 混合&#10;        ['', 1],  # 受理&#10;        ['', 2],  # 拟批&#10;        ['', 3]  # 已批&#10;    ]&#10;    for i in kinds:&#10;        # 依次获取数据&#10;        parse_kind(i)&#10;    run_time = time.time() - start&#10;    print('运行时间：%ss' % run_time)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run()&#10;" description="获取task" toReformat="false" toShortenFQNames="true">
    <variable name="province_id" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="city_id" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="tasktype" value="# 判断类型&#10;page_type = 0&#10;if re.search('竣工', title[j]):&#10;    continue&#10;if re.search('拟.*?审批', title[j]):&#10;    page_type = 2&#10;elif re.search('.*?审批', title[j]):&#10;    page_type = 3&#10;elif re.search('受理', title[j]):&#10;    page_type = 1&#10;" description="task类型" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ifre" value="if re.search('$re$', i):&#10;    data['$type$'] = table[i]&#10;" description="表格字典" toReformat="false" toShortenFQNames="true">
    <variable name="re" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="hpsearchdata" value="if re.search('(?:$des$)[:：].*', i):&#10;    data['$key$'] = re.search('(?:$des$)[:：].*', i).group(1)&#10;" description="正则判断是否存在特定字符: 带有分组和：的分割" toReformat="false" toShortenFQNames="true">
    <variable name="des" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="key" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="hpsearch" value="if re.search('$des$', $i$):&#10;    " description="正则判断是否存在特定字符：简单的" toReformat="false" toShortenFQNames="true">
    <variable name="des" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="i" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="hptable" value="table = i_api.parse_table_with_url(html, &quot;$xpath$&quot;)&#10;pprint(table)&#10;for i in table[1]:&#10;    href = ','.join([urljoin(url, j) for i in table[2] for j in i])&#10;    pass" description="huanping中的表格" toReformat="false" toShortenFQNames="true">
    <variable name="xpath" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="ifrei" value="if re.search('$re$', i):&#10;    data['$type$'] = re.search('$re$', i).group(1)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="re" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="saveTableToHuanping" value="i_api.save_table_to_huanping(province_id, city_id, $type$, task_id,  url, title, public_time, html, xpath=&quot;$xpath$&quot;, to_save=False)" description="直接将表格数据保存到数据库" toReformat="false" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="xpath" expression="" defaultValue="&quot;//table/tbody/tr[count(child::node()) &gt; 4]&quot;" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="saveAlineToHuanping" value="i_api.save_aline_to_huanping(province_id, city_id, $type$, task_id, url, title, public_time, html, xpath=&quot;$xpath$&quot;, min_num=8, to_save=False)" description="数据一行一行且用冒号分割" toReformat="false" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="xpath" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="saveParaToHuanping" value="i_api.save_para_to_huanping(province_id, city_id, $type$, task_id,  url, title, public_time, html, xpath=&quot;$xpath$&quot;, min_num=8, to_save=False)" description="段落式的数据存入" toReformat="false" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="xpath" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="saveTitleToHuanping" value="i_api.save_title_to_huanping(province_id, city_id, $type$, task_id,  url, title,public_time, html, xpath=&quot;&quot;, to_save=False)" description="从标题中获取数据" toReformat="false" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>